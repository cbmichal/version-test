name: Release .NET App

on:
  push:
    tags:
      - "v*.*.*.*"    # version tags
    branches:
      - main
      - "release/*"

env:
  MAJOR: 1
  MINOR: 2
  PATCH: 2   # c for main, bump manually when starting new dev cycle

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # need tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            # main branch → use MAJOR.MINOR.PATCH and increment build
            LAST_TAG=$(git tag --list "v${MAJOR}.${MINOR}.${PATCH}.*" --sort=-v:refname | head -n 1)

            if [[ -z "$LAST_TAG" ]]; then
              BUILD=1
            else
              BUILD=$(echo $LAST_TAG | awk -F. '{print $4}')
              BUILD=$((BUILD + 1))
            fi

            VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD}"

          elif [[ "${GITHUB_REF}" == refs/heads/release/* ]]; then
            # release branch → PATCH comes from branch name
            PATCH=${GITHUB_REF#refs/heads/release/}

            LAST_TAG=$(git tag --list "v${MAJOR}.${MINOR}.${PATCH}.*" --sort=-v:refname | head -n 1)

            if [[ -z "$LAST_TAG" ]]; then
              BUILD=1
            else
              BUILD=$(echo $LAST_TAG | awk -F. '{print $4}')
              BUILD=$((BUILD + 1))
            fi

            VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD}"

          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # Case: manual tag push
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            echo "Unknown ref: $GITHUB_REF"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore

      - name: Build with version
        run: dotnet build --configuration Release /p:Version=${VERSION}

      - name: Publish app
        run: dotnet publish -c Release -o ./publish /p:Version=${VERSION}

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-${{ env.VERSION }}
          
          path: ./publish/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-${{ needs.build.outputs.version }}
          path: ./release
      - name: Display structure of downloaded files
        run: ls -R

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          files: ./release/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
